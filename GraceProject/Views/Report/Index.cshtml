@* We commented the <script src="~/PanelsTemplate/vendors/jquery/dist/jquery.min.js"></script> part for jquery version conflict in _StudentLayout.cshtml *@




@model GraceProject.Models.Report

@{
    ViewData["Title"] = "Course Progress Report";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";
}

<div class="container mt-5">
    <h2 class="mb-4 text-center">Course Progress Report</h2>

    <!-- Form Section (Input Boxes and Search Button) -->
    @using (Html.BeginForm("Search", "Report", FormMethod.Post, new { @class = "row g-3" }))
    {
        <div class="col-lg-3">
            <div class="form-group">
                <label for="SearchType" class="form-label">Search Type</label>
                @Html.DropDownListFor(m => m.SearchType, new List<SelectListItem>
            {
            new SelectListItem { Text = "Search Student Progress by Name", Value = "SearchByStudent", Selected = true},
            new SelectListItem { Text = "Search All Student's Progress by Educator Name", Value = "SearchByEducator"},
            new SelectListItem { Text = "Search All Student's Progress by School Name" , Value = "SearchBySchool"}
            }, new { @class = "form-control", id = "searchType" })
            </div>
        </div>

        <div class="col-lg-3">
            <div class="form-group">
                <label for="Value" class="form-label">Value</label>
                <input type="text" id="Value" name="Value" class="form-control" placeholder="Type to search..."/>
                <input type="hidden" id="hidden-value">
            </div>
        </div>

        <div class="col-lg-3">
            <div class="form-group">
                <label for="ReportType" class="form-label">Report Type</label>
                @Html.DropDownListFor(m => m.ReportType, new List<SelectListItem>
            {
            new SelectListItem { Text = "Report By Student Grades", Value = "ReportByGrades", Selected = true},
            new SelectListItem { Text = "Report By Student Slide Views", Value = "ReportBySlideViews"},
            new SelectListItem { Text = "Report By Student Time Spent" , Value = "ReportByTimeSpent"},
            new SelectListItem { Text = "Report By All Of The Above" , Value = "ReportByAllFeilds"}
            }, new { @class = "form-control" })
            </div>
        </div>

        <div class="col-lg-3">
            <div class="form-group">
                <label for="Course" class="form-label">Course</label>
                @* <input type="text" id="Course" name="Course" class="form-control" placeholder="Type to search..." />
                <input type="hidden" id="hidden-course-value"> *@
                @Html.DropDownListFor(m => m.Course, new List<SelectListItem>
            {
            
            }, new { @class = "form-control", id = "course" })

            </div>
        </div>

        <div class="col-lg-3">
            <div class="form-group">
                <label for="FromDate" class="form-label">From Date</label>
                @Html.TextBoxFor(m => m.FromDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
            </div>
        </div>

        <div class="col-lg-3">
            <div class="form-group">
                <label for="ToDate" class="form-label">To Date</label>
                @Html.TextBoxFor(m => m.ToDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
            </div>
        </div>

        <div class="col-lg-3">
            <div class="form-group">
                <label for="ChartScale" class="form-label">Chart Scale</label>
                @Html.DropDownListFor(m => m.ChartScale, new List<SelectListItem>
            {
            new SelectListItem { Text = "Daily", Value = "DailyReport"},
            new SelectListItem { Text = "Weekly", Value = "WeeklyReport"},
            new SelectListItem { Text = "Monthly" , Value = "MonthlyReport", Selected = true},
            new SelectListItem { Text = "Yearly" , Value = "YearlyReport"}
            }, new { @class = "form-control" })
            </div>
        </div>

        <div class="col-3">
            <br />
            <button type="submit" class="btn btn-primary w-100">Search</button>
        </div>
    }

    <!-- Tab Section (At the Bottom) -->
    <div class="mt-5">
        <h4 class="mb-3">Search Results:</h4>

        <!-- Tabs Navigation (At the Bottom) -->
        <ul class="nav nav-tabs mb-4" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link active" id="charts-tab" data-bs-toggle="tab" href="#charts" role="tab" aria-controls="charts" aria-selected="true">Charts</a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link" id="records-tab" data-bs-toggle="tab" href="#records" role="tab" aria-controls="records" aria-selected="true">Records</a>
            </li>
        </ul>

        <!-- Tabs Content -->
        <div class="tab-content" id="myTabContent">
            <!-- Charts Tab Content -->
            <div class="tab-pane show active" id="charts" role="tabpanel" aria-labelledby="charts-tab">
                <p>This is where student-specific information in the form of charts will be displayed.</p>
                <!-- Charts Containers -->
                <div class="row">
                    <div class="col-md-2">
                        <canvas id="pieChart"></canvas>
                    </div>
                    <div class="col-md-4">
                        <canvas id="barChart" style="width: 500px;"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Records Tab Content -->
            <div class="tab-pane" id="records" role="tabpanel" aria-labelledby="records-tab">
                <h5>Records Section</h5>
                <table id="recordTable" class="table table-striped table-bordered" style="width:100%">
                    <thead>
                        <tr>
                            <th>Student Name</th>
                            <th>Enrollment</th>
                            <th>School</th>
                            <th>Age</th>
                            <th>Enrollment Start date</th>
                            <th>Grades</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Tiger Nixon</td>
                            <td>System Architect</td>
                            <td>Edinburgh</td>
                            <td>61</td>
                            <td>2011-04-25</td>
                            <td>3.00</td>
                        </tr>
                        <tr>
                            <td>Garrett Winters</td>
                            <td>Accountant</td>
                            <td>Tokyo</td>
                            <td>63</td>
                            <td>2011-07-25</td>
                            <td>3.20</td>
                        </tr>
                        <tr>
                            <td>Ashton Cox</td>
                            <td>Junior Technical Author</td>
                            <td>San Francisco</td>
                            <td>66</td>
                            <td>2009-01-12</td>
                            <td>3.31</td>
                        </tr>
                        <tr>
                            <td>Cedric Kelly</td>
                            <td>Senior Javascript Developer</td>
                            <td>Edinburgh</td>
                            <td>22</td>
                            <td>2012-03-29</td>
                            <td>3.00</td>
                        </tr>
                        <tr>
                            <td>Airi Satou</td>
                            <td>Accountant</td>
                            <td>Tokyo</td>
                            <td>33</td>
                            <td>2008-11-28</td>
                            <td>2.83</td>
                        </tr>
                        <tr>
                            <td>Brielle Williamson</td>
                            <td>Integration Specialist</td>
                            <td>New York</td>
                            <td>61</td>
                            <td>2012-12-02</td>
                            <td>3.73</td>
                        </tr>
                        <tr>
                            <td>Herrod Chandler</td>
                            <td>Sales Assistant</td>
                            <td>San Francisco</td>
                            <td>59</td>
                            <td>2012-08-06</td>
                            <td>3.67</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>var j = jQuery.noConflict(true);</script>
<!-- jQuery UI CSS -->
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<!-- jQuery UI JS -->
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

<!-- Include Bootstrap JS (for tabs functionality) -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<script>
    $(document).ready(function () {

        //On search type change
        $('#searchType').change(function () {
            var searchType = $(this).val();
            // clear prev autocomplete
            $("#Value").val('');

            // Set autocomplete based on search type
            if (searchType == "SearchByStudent") {
                valueAutoComplete("/Report/Report/GetStudentList", "student");
            } else if (searchType == "SearchByEducator") {
                valueAutoComplete("/Report/Report/GetTeacherList", "educator");
            } else if (searchType == "SearchBySchool") {
                valueAutoComplete("/Report/Report/GetSchoolList", "school");
            }
        });

        function valueAutoComplete(url, searchType) {
            //console.log(searchType);
            $("#Value").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: url,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ "keyword": request.term }),
                        success: function (data) {
                            debugger;
                            response($.map(data, function (item) {
                                return {
                                    value: item.id,
                                    label: item.name
                                };
                            }));
                        },
                        error: function () {
                            console.log("Error fetching data");
                        }
                    });
                },
                minLength: 2,
                select: function (event, ui) {
                    //debugger;
                    $("#Value").val(ui.item.label);
                    // Set the selected item's value to the hidden input
                    $("#hidden-value").val(ui.item.value);

                    //!!!!
                    var data = ui.item.value
                    console.log(searchType);
                    $("#course").find("option").remove();
                    if (searchType == "student") {
                        GetCoursesByStudent(data);
                    } else if (searchType == "educator") {
                        GetCoursesByEducator(data);
                    } else if (searchType == "school") {
                        GetCoursesBySchool(data);
                    }
                    

                    return false;
                }
            });
        }

        // Initializing autocomplete with default
        valueAutoComplete("/Report/Report/GetStudentList", "student");

        // function courseAutoComplete(url, data) {
        //     // debugger;
        //     // console.log(url);
        //     $("#Course").autocomplete({
        //         source: function (request, response) {
        //             $.ajax({
        //                 url: url,
        //                 type: 'POST',
        //                 contentType: 'application/json',
        //                 data: JSON.stringify(request.term),
        //                 success: function (data) {
        //                     debugger;
        //                     response($.map(data, function (item) {
        //                         return {
        //                             value: item.id,
        //                             label: item.name
        //                         };
        //                     }));
        //                 },
        //                 error: function () {
        //                     console.log("Error fetching data");
        //                 }
        //             });
        //         },
        //         minLength: 0,
        //         select: function (event, ui) {
        //             //debugger;
        //             $("#Course").val(ui.item.label);
        //             // Set the selected item's value to the hidden input
        //             $("#hidden-course-value").val(ui.item.value);

        //             return false;
        //         }
        //     });
        // }


        //GetSchoolList("Aubur", 1000);
        //GetCoursesBySchool(3);
        //GetCoursesByEducator("05bb300c-d434-4058-92d2-87585b7011d1");
        //GetCoursesByStudent("3ce5eb60-109d-4604-867e-df62abbecfbf");
        //GetStudentList("Ma", 1000);
        //GetTeacherList("Mar", 1000);




        // Pie Chart
        var ctxPie = document.getElementById('pieChart').getContext('2d');
        var pieChart = new Chart(ctxPie, {
            type: 'pie',
            data: {
                labels: ['Red', 'Blue', 'Yellow'],
                datasets: [{
                    label: 'Pie Dataset',
                    data: [10, 20, 30],
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],
                    hoverOffset: 4
                }]
            }
        });

        // Bar Chart
        var ctxBar = document.getElementById('barChart').getContext('2d');
        var barChart = new Chart(ctxBar, {
            type: 'bar',
            data: {
                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                datasets: [{
                    label: 'Bar Dataset',
                    data: [65, 59, 80, 81, 76, 71, 58, 91, 42, 44, 62, 78],
                    backgroundColor: '#36A2EB',
                    borderColor: '#36A2EB',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });

    function GetStudentList(keyword, count) {
        $.ajax({
            url: "/Report/Report/GetStudentList",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ "keyword": keyword, "count": count }),
            success: function (response) {
                debugger;
                console.log("Success");
            },
            error: function (xhr, status, error) {
                debugger;
                console.log('Error: ' + xhr.responseText);
            }
        });
    }

    function GetTeacherList(keyword, count) {
        $.ajax({
            url: "/Report/Report/GetTeacherList",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ "keyword": keyword, "count": count }),
            success: function (response) {
                debugger;
                console.log("Success");
            },
            error: function (xhr, status, error) {
                debugger;
                console.log('Error: ' + xhr.responseText);
            }
        });
    }

    function GetSchoolList(keyword, count) {
        $.ajax({
            url: "/Report/Report/GetSchoolList",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ "keyword": keyword, "count": count }),
            success: function (response) {
                debugger;
                console.log("Success");
            },
            error: function (xhr, status, error) {
                console.log('Error: ' + xhr.responseText);
            }
        });
    }

    function GetCoursesByStudent(studentId) {
        $.ajax({
            url: "/Report/Report/GetCoursesByStudent",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(studentId),
            success: function (response) {
                debugger;
                console.log("Success");
                // Populate the dropdown
                var dropdown = $("#course");
                $.each(response, function (index, item) {
                    dropdown.append($('<option></option>').attr('value', item.id).text(item.name));
                });
            },
            error: function (xhr, status, error) {
                debugger;
                console.log('Error: ' + xhr.responseText);
            }
        });
    }

    function GetCoursesByEducator(educatorId) {
        $.ajax({
            url: "/Report/Report/GetCoursesByEducator",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(educatorId),
            success: function (response) {
                debugger;
                console.log("Success");
                // Populate the dropdown
                var dropdown = $("#course");
                $.each(response, function (index, item) {
                    dropdown.append($('<option></option>').attr('value', item.id).text(item.name));
                });
            },
            error: function (xhr, status, error) {
                debugger;
                console.log('Error: ' + xhr.responseText);
            }
        });
    }

    function GetCoursesBySchool(schoolId) {
        $.ajax({
            url: "/Report/Report/GetCoursesBySchool",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(schoolId),
            success: function (response) {
                debugger;
                console.log("Success");
                // Populate the dropdown
                var dropdown = $("#course");
                $.each(response , function (index, item) {
                    dropdown.append($('<option></option>').attr('value', item.id).text(item.name));
                });
            },
            error: function (xhr, status, error) {
                debugger;
                console.log('Error: ' + xhr.responseText);
            }
        });
    }

    // function fetchData(url, data){
    //     $.ajax({
    //         url: url,
    //         type: 'POST',
    //         contentType: 'application/json',
    //         data: JSON.stringify(data),
    //         success: function (response) {
    //             console.log("Success");
    //         },
    //         error: function (xhr, status, error) {
    //             console.log('Error: '+ xhr.responseText)
    //         }
    //     });
    // }
</script>


