@model GraceProject.ViewModels.QuizViewModel

@{
    ViewData["Title"] = "Take Quiz";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";
}

<style>
    .form-check-label {
        margin-left: 30px; /* Adjust this value to increase or decrease spacing */
    }

    .time-details {
        background-color: #f8f9fa;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        width: 200px;
        text-align: center;
        margin-bottom: 20px;
    }

    .question-card {
        margin-bottom: 20px;
    }

    .card-header {
        background-color: #ffffff;
        color: black;
        border-bottom: 1px solid #ddd;
    }

    .card-body {
        background-color: #f8f9fa;
    }

    .btn {
        margin: 5px;
    }

    .navigation-buttons {
        text-align: center;
    }

    .submit-button {
        text-align: center;
    }

    .quiz-container {
        flex-grow: 1;
        margin-right: 20px;
    }

    .question-navigation {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

        .question-navigation button {
            margin: 2px;
        }
</style>

<div class="container mt-4">
    <h2 class="text-center mb-4">@Model.Title</h2>

    <div class="d-flex justify-content-between align-items-start">
        <div id="quiz-container" class="quiz-container">
            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                var question = Model.Questions[i];
                <div class="question" id="question-@i" style="display: @(i == 0 ? "block" : "none")">
                    <div class="card question-card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Question @(i + 1)</h5>
                            <span class="badge bg-secondary">1 pts</span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@question.Text</p>
                            @if (!string.IsNullOrEmpty(question.ImageUrl))
                            {
                                <div class="text-center mb-3">
                                    <img src="@question.ImageUrl" alt="Question Image" class="img-fluid mb-2" style="max-width: 100%; height: auto; max-height: 300px;" />
                                </div>
                            }
                            <div class="mt-3">
                                @if (question.Type == "Multiple Choice")
                                {
                                    <div class="form-check mt-2 pt-2 border-top border-bottom">
                                        @for (int j = 0; j < question.Options.Count; j++)
                                        {
                                            var option = question.Options[j];
                                            <div class="form-check mt-2 pb-2 border-bottom">
                                                <input class="form-check-input" type="radio" id="option-@i-@j" name="Questions[@i].SelectedOption" value="@j" />
                                                <label class="form-check-label" for="option-@i-@j">@option.Text</label>
                                            </div>
                                        }
                                    </div>
                                }
                                else if (question.Type == "Fill in the Blank")
                                {
                                    <input class="form-control mt-2" type="text" name="Questions[@i].FillInTheBlankAnswer" placeholder="Fill in the blank" />
                                }
                                else if (question.Type == "True/False")
                                {
                                    <div class="form-check mt-2 pt-2 border-top border-bottom">
                                        <div class="form-check mt-2 pb-2 border-bottom">
                                            <input class="form-check-input" type="radio" id="true-@i" name="Questions[@i].TrueFalseAnswer" value="true" />
                                            <label class="form-check-label" for="true-@i">True</label>
                                        </div>
                                        <div class="form-check mt-2 pb-2 border-bottom">
                                            <input class="form-check-input" type="radio" id="false-@i" name="Questions[@i].TrueFalseAnswer" value="false" />
                                            <label class="form-check-label" for="false-@i">False</label>
                                        </div>
                                    </div>
                                }
                                <!-- Other question types can be added here -->
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="time-details">
            <h5>Time Details</h5>
            <p>Total Time: @Model.Duration minutes</p>
            <p id="time-elapsed">Time Elapsed: 0 Minutes, 0 Seconds</p>
            <button class="btn btn-sm btn-secondary" id="hide-time-button" onclick="toggleTimeVisibility()">Hide Time</button>
            <div class="question-navigation mt-4">
                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    <button class="btn btn-outline-primary btn-sm" onclick="jumpToQuestion(@i)">Question @(i + 1)</button>
                }
            </div>
        </div>
    </div>

    <div class="navigation-buttons mt-4">
        <button id="prev-button" class="btn btn-secondary" onclick="navigateQuestions(-1)" style="display:none;">Previous</button>
        <button id="next-button" class="btn btn-secondary" onclick="navigateQuestions(1)">Next</button>
    </div>
    <div class="submit-button mt-3">
        <button id="submit-button" type="submit" class="btn btn-primary" style="display:none;">Submit</button>
    </div>
</div>

@section Scripts {
    <script>
        let currentQuestionIndex = 0;
        const totalQuestions = @Model.Questions.Count;
        let startTime = new Date();

        function updateElapsedTime() {
            const now = new Date();
            const elapsed = now - startTime;
            const minutes = Math.floor((elapsed / 1000) / 60);
            const seconds = Math.floor((elapsed / 1000) % 60);
            document.getElementById('time-elapsed').innerText = `Time Elapsed: ${minutes} Minutes, ${seconds} Seconds`;
        }

        function toggleTimeVisibility() {
            const timeElapsed = document.getElementById('time-elapsed');
            const hideTimeButton = document.getElementById('hide-time-button');
            if (timeElapsed.style.display === "none") {
                timeElapsed.style.display = "block";
                hideTimeButton.innerText = "Hide Time";
            } else {
                timeElapsed.style.display = "none";
                hideTimeButton.innerText = "Show Time";
            }
        }

        function navigateQuestions(direction) {
            document.getElementById(`question-${currentQuestionIndex}`).style.display = "none";
            currentQuestionIndex += direction;

            if (currentQuestionIndex < 0) {
                currentQuestionIndex = 0;
            } else if (currentQuestionIndex >= totalQuestions) {
                currentQuestionIndex = totalQuestions - 1;
            }

            document.getElementById(`question-${currentQuestionIndex}`).style.display = "block";

            document.getElementById('prev-button').style.display = currentQuestionIndex === 0 ? "none" : "inline-block";
            document.getElementById('next-button').style.display = currentQuestionIndex === totalQuestions - 1 ? "none" : "inline-block";
            document.getElementById('submit-button').style.display = currentQuestionIndex === totalQuestions - 1 ? "inline-block" : "none";
        }

        function jumpToQuestion(index) {
            document.getElementById(`question-${currentQuestionIndex}`).style.display = "none";
            currentQuestionIndex = index;
            document.getElementById(`question-${currentQuestionIndex}`).style.display = "block";
            document.getElementById('prev-button').style.display = currentQuestionIndex === 0 ? "none" : "inline-block";
            document.getElementById('next-button').style.display = currentQuestionIndex === totalQuestions - 1 ? "none" : "inline-block";
            document.getElementById('submit-button').style.display = currentQuestionIndex === totalQuestions - 1 ? "inline-block" : "none";
        }

        setInterval(updateElapsedTime, 1000);

        window.onload = function () {
            document.getElementById('prev-button').style.display = currentQuestionIndex === 0 ? "none" : "inline-block";
            document.getElementById('next-button').style.display = totalQuestions === 1 ? "none" : "inline-block";
            document.getElementById('submit-button').style.display = totalQuestions === 1 ? "inline-block" : "none";
        };
    </script>
}
